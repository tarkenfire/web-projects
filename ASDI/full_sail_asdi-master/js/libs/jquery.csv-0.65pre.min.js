
RegExp.escape=function(s){return s.replace(/[-\/\\^$*+?.()|[\]{}]/g,'\\$&');};(function($){'use strict'
$.csv={defaults:{separator:',',delimiter:'"',headerLine:1,dataLine:2},hooks:{castToScalar:function(value,state){var isNumber=/^[\d\.]+$/;var hasDot=/\./;if(value.length){if(isNaN(value)){return value;}else if(isNumber.test(value)){if(hasDot.test(value)){return parseFloat(value);}else{return parseInt(value);}}else{return undefined;}}}},parsers:{splitLines:function(csv,options){var entries=[];var state=0;var entry="";function endOfLine(){if(options.onParseEntry===undefined){entries.push(entry);}else{var hookVal=options.onParseEntry(entry,options.state);if(hookVal){entries.push(hookVal);}}
entry="";state=0;options.state.rowNum++;}
csv.replace(/(\"|,|\n|\r|[^\",\r\n]+)/gm,function(m0){switch(state){case 0:if(m0===","){entry+=m0;state=0;}else if(m0==="\""){entry+=m0;state=1;}else if(m0==="\n"){endOfLine();}else if(/^\r$/.test(m0)){}else{entry+=m0;state=3;}
break;case 1:if(m0==="\""){entry+=m0;state=2;}else{entry+=m0;state=1;}
break;case 2:var prevChar=entry.substr(entry.length-1);if(m0==="\""&&prevChar==="\""){entry+=m0;state=1;}else if(m0===","){entry+=m0;state=0;}else if(m0==="\n"){endOfLine();}else if(m0==="\r"){}else{throw new Error("Illegal state");}
break;case 3:if(m0===","){entry+=m0;state=0;}else if(m0==="\""){throw new Error("Illegal quote");}else if(m0==="\n"){endOfLine();}else if(m0==="\r"){}else{throw new Error("Illegal data");}
break;default:throw new Error("Unknown state");}
return"";});if(state!=0){endOfLine();}
if(entry!==''){entry+=','
endOfLine();}
return entries;},parseEntry:function(csv,options){var entry=[];var state=0;var value="";function endOfValue(){if(options.onParseValue===undefined){entry.push(value);}else{var hook=options.onParseValue(value,options.state);if(hook){entry.push(hook);}}
value="";state=0;options.state.colNum++;}
csv.replace(/(\"|,|\n|\r|[^\",\r\n]+)/gm,function(m0){switch(state){case 0:if(m0===","){value+='';endOfValue();}else if(m0==="\""){state=1;}else if(m0==="\n"||/^\r$/.test(m0)){return'';}else{value+=m0;state=3;}
break;case 1:if(m0==="\""){state=2;}else{value+=m0;state=1;}
break;case 2:if(m0==="\""){value+=m0;state=1;}else if(m0===","){endOfValue();}else if(m0==="\r"||m0==="\n"){return'';}else{throw new Error("Illegal state");}
break;case 3:if(m0===","){endOfValue();}else if(m0==="\""){throw new Error("Un-matched quote found");}else if(m0==="\n"||m0==="\r"){return'';}else{throw new Error("Illegal data");}
break;default:throw new Error("Unknown state");}
return"";});if(state!=0){endOfValue();}
return entry;}},toArray:function(csv,options,callback){var options=(options!==undefined?options:{});var config={};config.callback=((callback!==undefined&&typeof(callback)==='function')?callback:false);config.separator='separator'in options?RegExp.escape(options.separator):$.csv.defaults.separator;config.delimiter='delimiter'in options?RegExp.escape(options.delimiter):$.csv.defaults.delimiter;var state=(options.state!==undefined?options.state:{});var options={delimiter:config.delimiter,separator:config.separator,onParseEntry:options.onParseEntry,onParseValue:options.onParseValue,state:state}
var entry=$.csv.parsers.parseEntry(csv,options);if(!config.callback){return entry;}else{config.callback('',entry);}},toArrays:function(csv,options,callback){var options=(options!==undefined?options:{});var config={};config.callback=((callback!==undefined&&typeof(callback)==='function')?callback:false);config.separator='separator'in options?options.separator:$.csv.defaults.separator;config.delimiter='delimiter'in options?options.delimiter:$.csv.defaults.delimiter;var lines=[];var output=[];var state={rowNum:1,colNum:1,}
var options={delimiter:config.delimiter,separator:config.separator,onParseEntry:options.onParseEntry,onParseValue:options.onParseValue,state:state};lines=$.csv.parsers.splitLines(csv,options);for(var i=0,len=lines.length;i<len;i++){if(i===(len-1)&&lines[i]===''){break;}
var entry=$.csv.toArray(lines[i],options);output.push(entry);}
if(!config.callback){return output;}else{config.callback("",output);}},toObjects:function(csv,options,callback){var options=(options!==undefined?options:{});var config={};config.callback=((callback!==undefined&&typeof(callback)==='function')?callback:false);config.separator='separator'in options?options.separator:$.csv.defaults.separator;config.delimiter='delimiter'in options?options.delimiter:$.csv.defaults.delimiter;config.headerLine='headerLine'in options?options.headerLine:$.csv.defaults.headerLine;config.dataLine='dataLine'in options?options.dataLine:$.csv.defaults.dataLine;var lines=[];var output=[];var state={rowNum:1,colNum:2,};var options={delimiter:config.delimiter,separator:config.separator,onParseEntry:options.onParseEntry,onParseValue:options.onParseValue,state:state};lines=$.csv.parsers.splitLines(csv,options);var headers=$.csv.toArray(lines[(config.headerLine-1)]);for(var i=0,len=lines.length;i<len;i++){if(i<(config.dataLine-1)){continue;}
if(i===(len-1)&&lines[i]===''){break;}
var entry=$.csv.toArray(lines[i],options);var object={};for(var j in headers){object[headers[j]]=entry[j];}
output.push(object);}
if(!config.callback){return output;}else{config.callback("",output);}},fromArrays:function(arrays,options,callback){var options=(options!==undefined?options:{});var config={};config.callback=((callback!==undefined&&typeof(callback)==='function')?callback:false);config.separator='separator'in options?options.separator:$.csv.defaults.separator;config.delimiter='delimiter'in options?options.delimiter:$.csv.defaults.delimiter;config.escaper='escaper'in options?options.escaper:$.csv.defaults.escaper;config.experimental='experimental'in options?options.experimental:false;if(!config.experimental){throw new Error("not implemented");}
var output=[];for(i in arrays){output.push(arrays[i]);}
if(!config.callback){return output;}else{config.callback("",output);}},fromObjects2CSV:function(objects,options,callback){var options=(options!==undefined?options:{});var config={};config.callback=((callback!==undefined&&typeof(callback)==='function')?callback:false);config.separator='separator'in options?options.separator:$.csv.defaults.separator;config.delimiter='delimiter'in options?options.delimiter:$.csv.defaults.delimiter;config.experimental='experimental'in options?options.experimental:false;if(!config.experimental){throw new Error("not implemented");}
var output=[];for(i in objects){output.push(arrays[i]);}
if(!config.callback){return output;}else{config.callback("",output);}}};$.csvEntry2Array=$.csv.toArray;$.csv2Array=$.csv.toArrays;$.csv2Dictionary=$.csv.toObjects;})(jQuery);